{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nexports.__esModule = true;\nexports.compileQuery = void 0;\n\nvar debug_1 = require(\"debug\");\n\nvar getComparatorsForValue_1 = require(\"./getComparatorsForValue\");\n\nvar log = debug_1.debug('compileQuery');\n/**\n * Compile a query expression into a function that accepts an actual entity\n * and returns a query execution result (whether the entity satisfies the query).\n */\n\nfunction compileQuery(query) {\n  log(JSON.stringify(query));\n  return function (data) {\n    return Object.entries(query.where).map(function (_a) {\n      var _b = __read(_a, 2),\n          property = _b[0],\n          queryChunk = _b[1];\n\n      var actualValue = data[property];\n      log('executing query chunk', queryChunk, data);\n      log('actual value for \"%s\"', property, actualValue);\n\n      if (!queryChunk) {\n        return true;\n      }\n\n      return Object.entries(queryChunk).reduce(function (acc, _a) {\n        var _b = __read(_a, 2),\n            comparatorName = _b[0],\n            expectedValue = _b[1];\n\n        if (!acc) {\n          return acc;\n        }\n\n        if (Array.isArray(actualValue)) {\n          log('actual value is array, checking if at least one item matches...', {\n            comparatorName: comparatorName,\n            expectedValue: expectedValue\n          });\n          /**\n           * @fixme Can assume `some`? Why not `every`?\n           */\n\n          return actualValue.some(function (value) {\n            return compileQuery({\n              where: queryChunk\n            })(value);\n          });\n        } // When the actual value is a resolved relational property reference,\n        // execute the current query chunk on the referenced entity.\n\n\n        if (actualValue.__type) {\n          return compileQuery({\n            where: queryChunk\n          })(actualValue);\n        }\n\n        var comparatorSet = getComparatorsForValue_1.getComparatorsForValue(actualValue);\n        log('comparators', comparatorSet);\n        var comparatorFn = comparatorSet[comparatorName];\n        return comparatorFn(expectedValue, actualValue);\n      }, true);\n    }).every(Boolean);\n  };\n}\n\nexports.compileQuery = compileQuery;","map":{"version":3,"sources":["/Users/selamhabteab/Desktop/Projects/redux/redux-essentials-example-app/node_modules/@mswjs/data/lib/query/compileQuery.js"],"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","exports","__esModule","compileQuery","debug_1","require","getComparatorsForValue_1","log","debug","query","JSON","stringify","data","Object","entries","where","map","_a","_b","property","queryChunk","actualValue","reduce","acc","comparatorName","expectedValue","Array","isArray","some","__type","comparatorSet","getComparatorsForValue","comparatorFn","every","Boolean"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nexports.__esModule = true;\nexports.compileQuery = void 0;\nvar debug_1 = require(\"debug\");\nvar getComparatorsForValue_1 = require(\"./getComparatorsForValue\");\nvar log = debug_1.debug('compileQuery');\n/**\n * Compile a query expression into a function that accepts an actual entity\n * and returns a query execution result (whether the entity satisfies the query).\n */\nfunction compileQuery(query) {\n    log(JSON.stringify(query));\n    return function (data) {\n        return Object.entries(query.where)\n            .map(function (_a) {\n            var _b = __read(_a, 2), property = _b[0], queryChunk = _b[1];\n            var actualValue = data[property];\n            log('executing query chunk', queryChunk, data);\n            log('actual value for \"%s\"', property, actualValue);\n            if (!queryChunk) {\n                return true;\n            }\n            return Object.entries(queryChunk).reduce(function (acc, _a) {\n                var _b = __read(_a, 2), comparatorName = _b[0], expectedValue = _b[1];\n                if (!acc) {\n                    return acc;\n                }\n                if (Array.isArray(actualValue)) {\n                    log('actual value is array, checking if at least one item matches...', {\n                        comparatorName: comparatorName,\n                        expectedValue: expectedValue\n                    });\n                    /**\n                     * @fixme Can assume `some`? Why not `every`?\n                     */\n                    return actualValue.some(function (value) {\n                        return compileQuery({ where: queryChunk })(value);\n                    });\n                }\n                // When the actual value is a resolved relational property reference,\n                // execute the current query chunk on the referenced entity.\n                if (actualValue.__type) {\n                    return compileQuery({ where: queryChunk })(actualValue);\n                }\n                var comparatorSet = getComparatorsForValue_1.getComparatorsForValue(actualValue);\n                log('comparators', comparatorSet);\n                var comparatorFn = comparatorSet[comparatorName];\n                return comparatorFn(expectedValue, actualValue);\n            }, true);\n        })\n            .every(Boolean);\n    };\n}\nexports.compileQuery = compileQuery;\n"]},"metadata":{},"sourceType":"script"}