{"ast":null,"code":"var _jsxFileName = \"/Users/selamhabteab/Desktop/Projects/redux/redux-essentials-example-app/src/features/posts/AddPostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { postAdded } from './postsSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddPostForm = () => {\n  _s();\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [userId, setUserId] = useState('');\n  const dispatch = useDispatch();\n  const users = useSelector(state => state.users);\n\n  const onTitleChanged = e => setTitle(e.target.value);\n\n  const onContentChanged = e => setContent(e.target.value);\n\n  const onAuthorChanged = e => setUserId(e.target.value);\n\n  const onSavePostClicked = () => {\n    if (title && content) {\n      dispatch(postAdded(title, content, userId));\n      setTitle('');\n      setContent('');\n    }\n  };\n\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId);\n  const usersOptions = users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: user.id,\n    children: user.name\n  }, user.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a New Post \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postTitle\",\n        children: \" Post Title: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postTitle\",\n        name: \"postTitle\",\n        value: title,\n        onChange: onTitleChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postAuthor\",\n        children: \"Author:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"postAuthor\",\n        value: userId,\n        onChange: onAuthorChanged,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), usersOptions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postContent\",\n        children: \" Content \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"postContent\",\n        name: \"postContent\",\n        value: content,\n        onChange: onContentChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onSavePostClicked,\n        disabled: !canSave,\n        children: \" Save Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddPostForm, \"fkDPPdVtiqMdJoDgS0dWBndPHzY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AddPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPostForm\");","map":{"version":3,"sources":["/Users/selamhabteab/Desktop/Projects/redux/redux-essentials-example-app/src/features/posts/AddPostForm.js"],"names":["React","useState","useDispatch","useSelector","nanoid","postAdded","AddPostForm","title","setTitle","content","setContent","userId","setUserId","dispatch","users","state","onTitleChanged","e","target","value","onContentChanged","onAuthorChanged","onSavePostClicked","canSave","Boolean","usersOptions","map","user","id","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { nanoid } from '@reduxjs/toolkit'\nimport { postAdded } from './postsSlice'\n\nexport const AddPostForm = () => {\n    const [title, setTitle] = useState('')\n    const [content, setContent] = useState('')\n    const [userId, setUserId] = useState('')\n\n    const dispatch = useDispatch()\n\n    const users = useSelector(state => state.users)\n\n    const onTitleChanged = e => setTitle(e.target.value)\n    const onContentChanged = e => setContent(e.target.value)\n    const onAuthorChanged = e => setUserId(e.target.value)\n    const onSavePostClicked = () => {\n        if (title && content) {\n            dispatch(postAdded(title, content, userId))\n            setTitle('')\n            setContent('')\n        }\n    }\n\n    const canSave = Boolean(title) && Boolean(content) && Boolean(userId)\n\n    const usersOptions = users.map(user=>(\n        <option key={user.id} value={user.id}>\n            {user.name}\n        </option>\n    ))\n    return (\n        <section>\n            <h2>Add a New Post </h2>\n            <form>\n                <label htmlFor=\"postTitle\"> Post Title: </label>\n                <input \n                type = 'text'\n                id=\"postTitle\"\n                name=\"postTitle\"\n                value = { title }\n                onChange={ onTitleChanged}\n                />\n                <label htmlFor=\"postAuthor\">Author:</label>\n                <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n                    <option value=\"\">\n                    </option>\n                    {usersOptions}\n                </select>\n                <label htmlFor=\"postContent\"> Content </label>\n                <textarea\n                id=\"postContent\"\n                name=\"postContent\"\n                value={content}\n                onChange={onContentChanged}\n                />\n                <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}> Save Post </button>\n            </form>\n        </section>\n    )\n}"]},"metadata":{},"sourceType":"module"}