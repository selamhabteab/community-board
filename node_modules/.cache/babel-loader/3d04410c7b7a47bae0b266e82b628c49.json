{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport { sub } from 'date-fns';\nconst initialState = [{\n  id: '1',\n  title: 'My First Post',\n  content: 'This is my first post!',\n  date: sub(new Date(), {\n    minutes: 10\n  }).toISOString()\n}, {\n  id: '2',\n  title: 'My Second Post',\n  content: 'This is my second post!',\n  date: sub(new Date(), {\n    minutes: 5\n  }).toISOString()\n}, {\n  id: '3',\n  title: 'My Third Post',\n  content: 'This is my third post!',\n  date: sub(new Date(), {\n    minutes: 2\n  }).toISOString()\n}];\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // postAdded(state, action) {\n    //     state.push(action.payload)\n    // },\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            date: new Date().toISOString(),\n            title,\n            content,\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/selamhabteab/Desktop/Projects/redux/redux-essentials-example-app/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","sub","initialState","id","title","content","date","Date","minutes","toISOString","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","user","postUpdated","existingPost","find","post","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AACA,SAASC,GAAT,QAAoB,UAApB;AAEA,MAAMC,YAAY,GAAG,CACjB;AAACC,EAAAA,EAAE,EAAE,GAAL;AAAUC,EAAAA,KAAK,EAAE,eAAjB;AAAkCC,EAAAA,OAAO,EAAE,wBAA3C;AAAqEC,EAAAA,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAJ,EAAD,EAAa;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAb,CAAH,CAAiCC,WAAjC;AAA3E,CADiB,EAEjB;AAACN,EAAAA,EAAE,EAAE,GAAL;AAAUC,EAAAA,KAAK,EAAE,gBAAjB;AAAmCC,EAAAA,OAAO,EAAE,yBAA5C;AAAuEC,EAAAA,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAJ,EAAD,EAAa;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAb,CAAH,CAAgCC,WAAhC;AAA7E,CAFiB,EAGjB;AAACN,EAAAA,EAAE,EAAE,GAAL;AAAUC,EAAAA,KAAK,EAAE,eAAjB;AAAkCC,EAAAA,OAAO,EAAE,wBAA3C;AAAqEC,EAAAA,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAJ,EAAD,EAAa;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAb,CAAH,CAAgCC,WAAhC;AAA3E,CAHiB,CAArB;AAMA,MAAMC,UAAU,GAAGX,WAAW,CAAC;AAC3BY,EAAAA,IAAI,EAAE,OADqB;AAE3BT,EAAAA,YAF2B;AAG3BU,EAAAA,QAAQ,EAAE;AACN;AACA;AACA;AACAC,IAAAA,SAAS,EAAE;AACPC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACnBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACH,OAHM;;AAIPC,MAAAA,OAAO,CAACf,KAAD,EAAQC,OAAR,EAAiBe,MAAjB,EAAwB;AAC3B,eAAO;AACHF,UAAAA,OAAO,EAAE;AACLf,YAAAA,EAAE,EAAEH,MAAM,EADL;AAELM,YAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWE,WAAX,EAFD;AAGLL,YAAAA,KAHK;AAILC,YAAAA,OAJK;AAKLgB,YAAAA,IAAI,EAAED;AALD;AADN,SAAP;AASH;;AAdM,KAJL;;AAoBNE,IAAAA,WAAW,CAACP,KAAD,EAAQC,MAAR,EAAgB;AACvB,YAAM;AAACb,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAuBW,MAAM,CAACE,OAApC;AACA,YAAMK,YAAY,GAAGR,KAAK,CAACS,IAAN,CAAWC,IAAI,IAAEA,IAAI,CAACtB,EAAL,KAAWA,EAA5B,CAArB;;AACA,UAAIoB,YAAJ,EAAkB;AACdA,QAAAA,YAAY,CAACnB,KAAb,GAAqBA,KAArB;AACAmB,QAAAA,YAAY,CAAClB,OAAb,GAAuBA,OAAvB;AACH;AACJ;;AA3BK;AAHiB,CAAD,CAA9B;AAkCA,OAAO,MAAM;AAAEQ,EAAAA,SAAF;AAAaS,EAAAA;AAAb,IAA6BZ,UAAU,CAACgB,OAA9C;AACP,eAAehB,UAAU,CAACI,OAA1B","sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport { sub } from 'date-fns'\n\nconst initialState = [\n    {id: '1', title: 'My First Post', content: 'This is my first post!', date: sub(new Date(), { minutes: 10 }).toISOString()},\n    {id: '2', title: 'My Second Post', content: 'This is my second post!', date: sub(new Date(), { minutes: 5 }).toISOString()},\n    {id: '3', title: 'My Third Post', content: 'This is my third post!', date: sub(new Date(), { minutes: 2 }).toISOString()}\n]\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        // postAdded(state, action) {\n        //     state.push(action.payload)\n        // },\n        postAdded: {\n            reducer(state, action) {\n                state.push(action.payload)\n            },\n            prepare(title, content, userId){\n                return {\n                    payload: {\n                        id: nanoid(),\n                        date: new Date().toISOString(),\n                        title,\n                        content, \n                        user: userId\n                    }\n                }\n            }            \n        },\n        postUpdated(state, action) {\n            const {id, title, content} = action.payload\n            const existingPost = state.find(post=>post.id ===id)\n            if (existingPost) {\n                existingPost.title = title\n                existingPost.content = content\n            }\n        }\n    }\n})\n\nexport const { postAdded, postUpdated } = postsSlice.actions\nexport default postsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}