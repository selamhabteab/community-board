import { BaseTypes, DeepRequireExactlyOne, PrimaryKeyType, Value } from '../glossary';
export interface QuerySelector<EntityType extends Record<string, any>> {
    strict?: boolean;
    where: QuerySelectorWhere<EntityType>;
}
export declare type WeakQuerySelector<EntityType extends Record<string, any>> = Partial<QuerySelector<EntityType>>;
export declare type QuerySelectorWhere<EntityType extends Record<string, any>> = {
    [K in keyof EntityType]?: Partial<GetQueryFor<EntityType[K]>>;
};
export interface WeakQuerySelectorWhere<KeyType extends PrimaryKeyType> {
    [key: string]: Partial<GetQueryFor<KeyType>>;
}
export declare type SortDirection = 'asc' | 'desc';
export declare type OrderBy<EntityType> = DeepRequireExactlyOne<{
    [K in keyof EntityType]?: EntityType[K] extends BaseTypes ? SortDirection : OrderBy<EntityType[K]>;
}>;
export interface BulkQueryBaseOptions<EntityType extends Record<string, any>> {
    take?: number;
    orderBy?: OrderBy<EntityType> | OrderBy<EntityType>[];
}
interface BulkQueryOffsetOptions<EntityType> extends BulkQueryBaseOptions<EntityType> {
    skip?: number;
    cursor?: never;
}
interface BulkQueryCursorOptions<EntityType> extends BulkQueryBaseOptions<EntityType> {
    skip?: never;
    cursor: PrimaryKeyType | null;
}
export declare type BulkQueryOptions<EntityType> = BulkQueryOffsetOptions<EntityType> | BulkQueryCursorOptions<EntityType>;
export declare type ComparatorFn<ExpectedType extends any, ActualType extends any> = (expected: ExpectedType, actual: ActualType) => boolean;
export declare type QueryToComparator<QueryType extends StringQuery | NumberQuery | BooleanQuery | DateQuery> = {
    [K in keyof QueryType]: ComparatorFn<QueryType[K], QueryType[K] extends Array<infer T> ? T : QueryType[K]>;
};
export declare type GetQueryFor<T extends string | number | boolean | any[]> = T extends string ? StringQuery : T extends number ? NumberQuery : T extends Boolean ? BooleanQuery : T extends Date ? DateQuery : T extends Array<infer U> ? QuerySelector<U>['where'] : T extends Value<any, any> ? QuerySelector<T>['where'] : never;
export interface StringQuery {
    equals: string;
    notEquals: string;
    contains: string;
    notContains: string;
    in: string[];
    notIn: string[];
}
export interface NumberQuery {
    equals: number;
    notEquals: number;
    between: [number, number];
    notBetween: [number, number];
    gt: number;
    gte: number;
    lt: number;
    lte: number;
}
export interface BooleanQuery {
    equals: boolean;
    notEquals: boolean;
}
export interface DateQuery {
    equals: Date;
    notEquals: Date;
    gt: Date;
    gte: Date;
    lt: Date;
    lte: Date;
}
export {};
