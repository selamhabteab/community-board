"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
exports.__esModule = true;
exports.parseModelDefinition = void 0;
var debug_1 = require("debug");
var glossary_1 = require("../glossary");
var invariant_1 = require("../utils/invariant");
var findPrimaryKey_1 = require("../utils/findPrimaryKey");
var log = debug_1.debug('parseModelDefinition');
function parseModelDefinition(dictionary, modelName, definition) {
    log("parsing model definition for \"" + modelName + "\" entity", definition);
    var result = Object.entries(definition).reduce(function (result, _a) {
        var _b = __read(_a, 2), property = _b[0], valueGetter = _b[1];
        if ('isPrimaryKey' in valueGetter) {
            invariant_1.invariant(result.primaryKey, "Failed to parse a model definition for \"" + modelName + "\": cannot have both properties \"" + result.primaryKey + "\" and \"" + property + "\" as a primary key.");
            result.primaryKey = property;
            result.properties.push(property);
            return result;
        }
        if ('kind' in valueGetter &&
            [glossary_1.RelationKind.OneOf, glossary_1.RelationKind.ManyOf].includes(valueGetter.kind)) {
            var relationPrimaryKey = findPrimaryKey_1.findPrimaryKey(dictionary[valueGetter.modelName]);
            result.relations[property] = {
                kind: valueGetter.kind,
                modelName: valueGetter.modelName,
                unique: valueGetter.unique,
                primaryKey: relationPrimaryKey
            };
            return result;
        }
        result.properties.push(property);
        return result;
    }, {
        primaryKey: undefined,
        properties: [],
        relations: {}
    });
    if (!result.primaryKey) {
        throw new Error("Failed to parse a model definition for \"" + modelName + "\": no provided properties are marked as a primary key (" + result.properties.join(', ') + ").");
    }
    return result;
}
exports.parseModelDefinition = parseModelDefinition;
