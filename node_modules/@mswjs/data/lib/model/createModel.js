"use strict";
exports.__esModule = true;
exports.createModel = void 0;
var debug_1 = require("debug");
var glossary_1 = require("../glossary");
var defineRelationalProperties_1 = require("./defineRelationalProperties");
var log = debug_1.debug('createModel');
function createModel(modelName, definition, parsedModel, initialValues, db) {
    var _a;
    var primaryKey = parsedModel.primaryKey, properties = parsedModel.properties, relations = parsedModel.relations;
    log("creating a \"" + modelName + "\" entity (primary key: \"" + primaryKey + "\")", definition, parsedModel, relations, initialValues);
    var internalProperties = (_a = {},
        _a[glossary_1.InternalEntityProperty.type] = modelName,
        _a[glossary_1.InternalEntityProperty.primaryKey] = primaryKey,
        _a);
    var resolvedProperties = properties.reduce(function (entity, property) {
        var exactValue = initialValues[property];
        var propertyDefinition = definition[property];
        log("property definition for \"" + modelName + "." + property + "\"", propertyDefinition);
        // Ignore relational properties at this stage.
        if ('kind' in propertyDefinition) {
            return entity;
        }
        if ('isPrimaryKey' in propertyDefinition) {
            entity[property] = exactValue || propertyDefinition.getValue();
            return entity;
        }
        if (typeof exactValue === 'string' ||
            typeof exactValue === 'number' ||
            typeof exactValue === 'boolean' ||
            (exactValue === null || exactValue === void 0 ? void 0 : exactValue.constructor.name) === 'Date') {
            log("\"" + modelName + "." + property + "\" has a plain initial value:", exactValue);
            entity[property] = exactValue;
            return entity;
        }
        entity[property] = propertyDefinition();
        return entity;
    }, {});
    var entity = Object.assign({}, resolvedProperties, internalProperties);
    defineRelationalProperties_1.defineRelationalProperties(entity, initialValues, relations, db);
    log("created \"" + modelName + "\" entity", entity);
    return entity;
}
exports.createModel = createModel;
