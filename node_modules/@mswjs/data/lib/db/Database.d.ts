import { StrictEventEmitter } from 'strict-event-emitter';
import { InternalEntity, ModelDictionary, PrimaryKeyType } from '../glossary';
export declare type DatabaseMethodToEventFn<Method extends (...args: any[]) => any> = (id: string, ...args: Parameters<Method>) => void;
export interface DatabaseEventsMap {
    create: DatabaseMethodToEventFn<Database<any>['create']>;
    update: DatabaseMethodToEventFn<Database<any>['update']>;
    delete: DatabaseMethodToEventFn<Database<any>['delete']>;
}
export declare class Database<Dictionary extends ModelDictionary> {
    id: string;
    events: StrictEventEmitter<DatabaseEventsMap>;
    private models;
    constructor(dictionary: Dictionary);
    /**
     * Generates a unique MD5 hash based on the database
     * module location and invocation order. Used to reproducibly
     * identify a database instance among sibling instances.
     */
    private generateId;
    getModel<ModelName extends string>(name: ModelName): Map<PrimaryKeyType, InternalEntity<Dictionary, any>>;
    create<ModelName extends string>(modelName: ModelName, entity: InternalEntity<Dictionary, any>, customPrimaryKey?: PrimaryKeyType): Map<PrimaryKeyType, InternalEntity<Dictionary, any>>;
    update<ModelName extends string>(modelName: ModelName, prevEntity: InternalEntity<Dictionary, any>, nextEntity: InternalEntity<Dictionary, any>): void;
    has<ModelName extends string>(modelName: ModelName, primaryKey: PrimaryKeyType): boolean;
    count<ModelName extends string>(modelName: ModelName): number;
    delete<ModelName extends string>(modelName: ModelName, primaryKey: PrimaryKeyType): void;
    listEntities<ModelName extends string>(modelName: ModelName): InternalEntity<Dictionary, ModelName>[];
}
